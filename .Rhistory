hypoxia_geneIDs <- as.matrix(hypoxia_geneIDs)
#now we have to map these gene IDs to ENSEMBL IDs
#symbol_to_entrez <- as.list(org.Hs.egALIAS2EG)
#entrez_to_ensembl <- as.list(org.Hs.egENSEMBL2EG)
mir_name <- 'hsa-mir-210'
#geneIDEnsembl <- 'ENSG00000107159'
#load the data
#load(mRNA_fName)
#mRNA_expr_matrix <- assays(data)$'HTSeq - FPKM-UQ'
#colnames(mRNA_expr_matrix) <- substr(colnames(mRNA_expr_matrix),1,nchar(colnames(mRNA_expr_matrix))-12)
#load('TCGA-LUAD-miRNA.rda')
load(miRNA_fName)
miRNA_matrix <- data
#now just a bit of re-pre-processing
miRNA_names <- miRNA_matrix[,1]
miRNA_matrix <- miRNA_matrix[,seq(from=3,to=length(miRNA_matrix),by=3)]
cols <- colnames(miRNA_matrix)
colnames(miRNA_matrix) <- substr(cols,32,nchar(cols)-12)
row.names(miRNA_matrix) <- miRNA_names
subtype_fName <- paste('GDCdata/TCGA-',cancer_type,'/TCGA-',cancer_type,'-subtypes.csv',sep='')
clinical_information <- read.csv(subtype_fName)
colnames(clinical_information)[which(names(clinical_information) == "OS.event")] <- "events"
colnames(clinical_information)[which(names(clinical_information) == "OS.Time")] <- "times"
row.names(clinical_information) <- clinical_information$patient
clinical_information <- clinical_information[!is.na(clinical_information$times),]
clinical_information <- clinical_information[!is.na(clinical_information$events),]
colnames(miRNA_matrix) <- substr(colnames(miRNA_matrix),1,nchar(colnames(miRNA_matrix))-4)
common_samples <- intersect(colnames(miRNA_matrix),rownames(clinical_information))
#mRNA_expr_matrix <- mRNA_expr_matrix[,common_samples]
clinical_information <- clinical_information[common_samples,]
miRNA_matrix <- miRNA_matrix[,common_samples]
#first, let's do an expression level filter
# expression_threshold <- 0.80 # means that at least 80% of samples must have a nonzero value of the miRNA
# good_rows <- c()
# for (i in 1:length(rownames(miRNA_matrix))){
# 	#look over all miRNA, check that the number of zeros in the expression
# 	#is greater than the cutoff
# 	num_zeros <- sum(miRNA_matrix[i,]==0)
# 	if(num_zeros <  (1-expression_threshold) * length(colnames(miRNA_matrix))){
# 		#store the column number
# 		good_rows <- c(good_rows,i)
# 	}
# }
# miRNA_matrix <- miRNA_matrix[good_rows,]
# for (i in 1:length(common_samples)){
# 	#miRNA_matrix[,i] <- (rank(miRNA_matrix[,i]) - 1) / length(miRNA_matrix[,i])
# 	miRNA_matrix[,i] <- (rank(miRNA_matrix[,i])-1)/length(miRNA_matrix[,i])
# }
for (i in 1:length(rownames(miRNA_matrix))){
#miRNA_matrix[,i] <- (rank(miRNA_matrix[,i]) - 1) / length(miRNA_matrix[,i])
miRNA_matrix[i,] <- (rank(miRNA_matrix[i,])-1)/length(miRNA_matrix[i,])
}
#take just the common pieces
#mRNA_expr_matrix <- mRNA_expr_matrix[,common_colNames]
#miRNA_matrix <- miRNA_matrix[,common_colNames]
univar_cox_model <- coef(summary(coxph(Surv(clinical_information[common_samples,'times'],clinical_information[common_samples,'events']) ~  t(as.matrix(miRNA_matrix[mir_name,common_samples])))))#colMedians(mRNA_expr_matrix[hypoxia_geneIDs,common_samples]))))
univar_cox_model
t(as.matrix(miRNA_matrix[mir_name,common_samples]))
setwd("MetabricData")
mRNA_fNAME <- 'Illumina_HT12_normalised_mRNA_expression.xls'
mRNA_folder <- 'EGAD00010000434/'
mRNA_data <- read.table(paste(mRNA_folder,mRNA_fNAME,sep=''),header=TRUE)
miRNA_data <- read.table(paste(miRNA_folder,miRNA_fNAME,sep=''),header=TRUE)
geneIDEnsembl_caIX <- 'ENSG00000107159'
mir_210_probeID <- 'A_25_P00010995'
rownames(miRNA_data) <- miRNA_data$ProbeID
miRNA_dictionary <- miRNA_data[,1:2]
miRNA_data <- miRNA_data[,3:length(colnames(miRNA_data))]
common_samples <- intersect(colnames(mRNA_data),colnames(miRNA_data))
miRNA_data <- miRNA_data[,common_samples]
mRNA_data <- mRNA_data[,common_samples]
# for (i in 1:length(common_samples)){
# 	miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
# 	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
# }
for (i in 1:length(rownames(miRNA_data))){
miRNA_data[i,] <- (rank(miRNA_data[i,]) - 1) / length(miRNA_data[i,])
#	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
}
for (i in 1:length(rownames(mRNA_data))){
#miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
mRNA_data[i,] <- (rank(mRNA_data[i,]) - 1) / length(mRNA_data[i,])
}
clinical_fName <- 'tumour/patient_annotation.txt'
clinical_information <- read.table(clinical_fName, header=TRUE)
clinical_information <- clinical_information[,c("t.os","e.os")]
colnames(clinical_information) <- c("times","events")
clinical_information <- clinical_information[!is.na(clinical_information$times),]
clinical_information <- clinical_information[!is.na(clinical_information$events),]
#miRNA preprocessing
miRNA_folder <- 'EGAD00010000438/'
miRNA_fNAME <- 'Agilent_ncRNA_60k_normalised_miRNA_expression.xls'
mRNA_fNAME <- 'Illumina_HT12_normalised_mRNA_expression.xls'
mRNA_folder <- 'EGAD00010000434/'
mRNA_data <- read.table(paste(mRNA_folder,mRNA_fNAME,sep=''),header=TRUE)
miRNA_data <- read.table(paste(miRNA_folder,miRNA_fNAME,sep=''),header=TRUE)
geneIDEnsembl_caIX <- 'ENSG00000107159'
mir_210_probeID <- 'A_25_P00010995'
rownames(miRNA_data) <- miRNA_data$ProbeID
miRNA_dictionary <- miRNA_data[,1:2]
miRNA_data <- miRNA_data[,3:length(colnames(miRNA_data))]
common_samples <- intersect(colnames(mRNA_data),colnames(miRNA_data))
miRNA_data <- miRNA_data[,common_samples]
mRNA_data <- mRNA_data[,common_samples]
# for (i in 1:length(common_samples)){
# 	miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
# 	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
# }
for (i in 1:length(rownames(miRNA_data))){
miRNA_data[i,] <- (rank(miRNA_data[i,]) - 1) / length(miRNA_data[i,])
#	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
}
for (i in 1:length(rownames(mRNA_data))){
#miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
mRNA_data[i,] <- (rank(mRNA_data[i,]) - 1) / length(mRNA_data[i,])
}
cor(t(miRNA_data[mir_210_probeID,common_samples]),t(mRNA_data[geneIDEnsembl_caIX,common_samples]),method='spearman')
mRNA_fNAME <- 'Illumina_HT12_normalised_mRNA_expression.xls'
mRNA_folder <- 'EGAD00010000434/'
mRNA_data <- read.table(paste(mRNA_folder,mRNA_fNAME,sep=''),header=TRUE)
miRNA_data <- read.table(paste(miRNA_folder,miRNA_fNAME,sep=''),header=TRUE)
hypoxia_geneIDs <- read.table('hypoxia_gene_signature_ensembl.txt',header=FALSE)
mir_210_probeID <- 'A_25_P00010995'
rownames(miRNA_data) <- miRNA_data$ProbeID
miRNA_dictionary <- miRNA_data[,1:2]
miRNA_data <- miRNA_data[,3:length(colnames(miRNA_data))]
common_samples <- intersect(colnames(mRNA_data),colnames(miRNA_data))
miRNA_data <- miRNA_data[,common_samples]
mRNA_data <- mRNA_data[,common_samples]
# for (i in 1:length(common_samples)){
# 	miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
# 	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
# }
for (i in 1:length(rownames(miRNA_data))){
miRNA_data[i,] <- (rank(miRNA_data[i,]) - 1) / length(miRNA_data[i,])
#	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
}
for (i in 1:length(rownames(mRNA_data))){
#miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
mRNA_data[i,] <- (rank(mRNA_data[i,]) - 1) / length(mRNA_data[i,])
}
hypoxia_geneIDs <- intersect(rownames(mRNA_data),hypoxia_geneIDs[,1])
cor(t(miRNA_data[mir_210_probeID,common_samples]),colMedians(as.matrix(mRNA_data[hypoxia_geneIDs,common_samples])),method="spearman")
clinical_fName <- 'tumour/patient_annotation.txt'
clinical_information <- read.table(clinical_fName, header=TRUE)
mRNA_fNAME <- 'Illumina_HT12_normalised_mRNA_expression.xls'
mRNA_folder <- 'EGAD00010000434/'
mRNA_data <- read.table(paste(mRNA_folder,mRNA_fNAME,sep=''),header=TRUE)
hypoxia_geneIDs <- read.table('hypoxia_gene_signature_ensembl.txt',header=FALSE)
clinical_information <- clinical_information[,c("t.os","e.os")]
colnames(clinical_information) <- c("times","events")
clinical_information <- clinical_information[!is.na(clinical_information$times),]
clinical_information <- clinical_information[!is.na(clinical_information$events),]
common_samples <- intersect(colnames(mRNA_data),rownames(clinical_information))
clinical_information <- clinical_information[common_samples,]
mRNA_data <- mRNA_data[,common_samples]
# for (i in 1:length(common_samples)){
# 	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
# }
for (i in 1:length(rownames(mRNA_data))){
#miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
mRNA_data[i,] <- (rank(mRNA_data[i,]) - 1) / length(mRNA_data[i,])
}
hypoxia_geneIDs <- intersect(rownames(mRNA_data),hypoxia_geneIDs[,1])
univar_cox_model <- coef(summary(coxph(Surv(clinical_information[common_samples,'times'],clinical_information[common_samples,'events']) ~ colMedians(as.matrix(mRNA_data[hypoxia_geneIDs,common_samples])))))
univar_cox_model
miRNA_data <- read.table(paste(miRNA_folder,miRNA_fNAME,sep=''),header=TRUE)
mir_210_probeID <- 'A_25_P00010995'
rownames(miRNA_data) <- miRNA_data$ProbeID
miRNA_dictionary <- miRNA_data[,1:2]
miRNA_data <- miRNA_data[,3:length(colnames(miRNA_data))]
clinical_fName <- 'tumour/patient_annotation.txt'
clinical_information <- read.table(clinical_fName, header=TRUE)
clinical_information <- clinical_information[,c("t.os","e.os")]
colnames(clinical_information) <- c("times","events")
clinical_information <- clinical_information[!is.na(clinical_information$times),]
clinical_information <- clinical_information[!is.na(clinical_information$events),]
common_samples <- intersect(colnames(miRNA_data),rownames(clinical_information))
miRNA_data <- miRNA_data[,common_samples]
# for (i in 1:length(common_samples)){
# 	miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
# }
for (i in 1:length(rownames(miRNA_data))){
miRNA_data[i,] <- (rank(miRNA_data[i,]) - 1) / length(miRNA_data[i,])
#	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
}
univar_cox_model <- coef(summary(coxph(Surv(clinical_information[common_samples,'times'],clinical_information[common_samples,'events']) ~ t(as.matrix(miRNA_data[mir_210_probeID,common_samples])))))
univar_cox_model
density(miRNA_data[,1])
plot(density(miRNA_data[,1]))
for (i in 2:length(colnames(miRNA_data))){
lines(density(miRNA_data[,i]))
}
miRNA_data <- read.table(paste(miRNA_folder,miRNA_fNAME,sep=''),header=TRUE)
mir_210_probeID <- 'A_25_P00010995'
rownames(miRNA_data) <- miRNA_data$ProbeID
miRNA_dictionary <- miRNA_data[,1:2]
miRNA_data <- miRNA_data[,3:length(colnames(miRNA_data))]
clinical_fName <- 'tumour/patient_annotation.txt'
clinical_information <- read.table(clinical_fName, header=TRUE)
clinical_information <- clinical_information[,c("t.os","e.os")]
colnames(clinical_information) <- c("times","events")
clinical_information <- clinical_information[!is.na(clinical_information$times),]
clinical_information <- clinical_information[!is.na(clinical_information$events),]
common_samples <- intersect(colnames(miRNA_data),rownames(clinical_information))
miRNA_data <- miRNA_data[,common_samples]
# for (i in 1:length(common_samples)){
# 	miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
# }
expression_threshold <- 0.80 # means that at least 80% of samples must have a nonzero value of the miRNA
good_rows <- c()
for (i in 1:length(rownames(miRNA_data))){
#look over all miRNA, check that the number of zeros in the expression
#is greater than the cutoff
num_zeros <- sum(miRNA_data[i,]==0)
if(num_zeros <  (1-expression_threshold) * length(colnames(miRNA_data))){
#store the column number
good_rows <- c(good_rows,i)
}
}
miRNA_data <- miRNA_data[good_rows,]
for (i in 1:length(rownames(miRNA_data))){
miRNA_data[i,] <- (rank(miRNA_data[i,]) - 1) / length(miRNA_data[i,])
#	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
}
univar_cox_model <- coef(summary(coxph(Surv(clinical_information[common_samples,'times'],clinical_information[common_samples,'events']) ~ t(as.matrix(miRNA_data[mir_210_probeID,common_samples])))))
univar_cox_model
plot(density(miRNA_data[,1]))
clinical_fName <- 'tumour/patient_annotation.txt'
clinical_information <- read.table(clinical_fName, header=TRUE)
clinical_information <- clinical_information[!is.na(clinical_information$ER),]
er_status <- matrix(,nrow=length(clinical_information$ER),ncol=1)
row.names(er_status) <- rownames(clinical_information)
for (i in 1:length(er_status)){
if (clinical_information$ER[i] == '-'){#} & strata_data$PR.Status == 'Negative' & strata_data$HER2.Final.Status =='Negative'){
er_status[i] <- 1
}else{
er_status[i] <- 0
}
}
miRNA_data <- read.table(paste(miRNA_folder,miRNA_fNAME,sep=''),header=TRUE)
mir_210_probeID <- 'A_25_P00010995'
rownames(miRNA_data) <- miRNA_data$ProbeID
miRNA_dictionary <- miRNA_data[,1:2]
miRNA_data <- miRNA_data[,3:length(colnames(miRNA_data))]
common_samples <- intersect(colnames(miRNA_data),rownames(er_status))
miRNA_data <- miRNA_data[,common_samples]
er_status <- er_status[common_samples,]
# for (i in 1:length(common_samples)){
# 	miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
# }
for (i in 1:length(rownames(miRNA_data))){
miRNA_data[i,] <- (rank(miRNA_data[i,]) - 1) / length(miRNA_data[i,])
#	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
}
cor(t(as.vector(miRNA_data[mir_210_probeID,common_samples])),as.vector(er_status[common_samples]),method='spearman')
clinical_fName <- 'tumour/patient_annotation.txt'
clinical_information <- read.table(clinical_fName, header=TRUE)
clinical_information <- clinical_information[!is.na(clinical_information$ER),]
clinical_information <- clinical_information[!is.na(clinical_information$PgR),]
clinical_information <- clinical_information[!is.na(clinical_information$ERB),]
tn_status <- matrix(,nrow=length(clinical_information$ER),ncol=1)
row.names(tn_status) <- rownames(clinical_information)
for (i in 1:length(tn_status)){
if (clinical_information$ER[i] == '-' & clinical_information$PgR[i] == '-' & clinical_information$ERB[i] =='-'){
tn_status[i] <- 1
}else{
tn_status[i] <- 0
}
}
miRNA_data <- read.table(paste(miRNA_folder,miRNA_fNAME,sep=''),header=TRUE)
mir_210_probeID <- 'A_25_P00010995'
rownames(miRNA_data) <- miRNA_data$ProbeID
miRNA_dictionary <- miRNA_data[,1:2]
miRNA_data <- miRNA_data[,3:length(colnames(miRNA_data))]
common_samples <- intersect(colnames(miRNA_data),rownames(tn_status))
miRNA_data <- miRNA_data[,common_samples]
tn_status <-tn_status[common_samples,]
# for (i in 1:length(common_samples)){
# 	miRNA_data[,i] <- (rank(miRNA_data[,i]) - 1) / length(miRNA_data[,i])
# }
for (i in 1:length(rownames(miRNA_data))){
miRNA_data[i,] <- (rank(miRNA_data[i,]) - 1) / length(miRNA_data[i,])
#	mRNA_data[,i] <- (rank(mRNA_data[,i]) - 1) / length(mRNA_data[,i])
}
cor(t(as.vector(miRNA_data[mir_210_probeID,common_samples])),as.vector(tn_status[common_samples]),method='spearman')
#Cross-validation function, combining univariate and penalised methods
cancer_type <- 'BRCA'
clinical_fName <- paste('GDCdata/TCGA-',cancer_type,'/TCGA-',cancer_type,'_clinical.csv',sep='')
miRNA_fName <- paste('TCGA-',cancer_type,'-miRNA.rda',sep='')
mRNA_fName <- paste('TCGA-',cancer_type,'-mRNA.rda',sep='')
subtype_fName <- paste('GDCdata/TCGA-',cancer_type,'/TCGA-',cancer_type,'-subtypes.csv',sep='')
# clinical_information <- read.csv(clinical_fName)
# times <- clinical_information$days_to_death
# events <- !is.na(clinical_information$days_to_death)
# #if we don't know the days to death, then let's fill in with the days to last follow up
# #at least add censored data to the mix?
# for (i in 1:length(times)){
# 	if (is.na(times[i])){
# 		times[i] = clinical_information$days_to_last_follow_up[i]
# 	}
# }
# non_na_vals <- !is.na(times)
# times <- times[non_na_vals]
# events <- events[non_na_vals]
# clinical_information<- clinical_information[non_na_vals,]
# clinical_information <- cbind(clinical_information, times,events)
# clin_info <- clinical_information$submitter_id
# row.names(clinical_information) <- clin_info
#here is where we change the clinical information to that of the subtypes file...
#comment this part out if this feature is not desired
clinical_information <- read.csv(subtype_fName)
colnames(clinical_information)[which(names(clinical_information_subtypes) == "OS.event")] <- "events"
colnames(clinical_information)[which(names(clinical_information_subtypes) == "OS.Time")] <- "times"
row.names(clinical_information) <- clinical_information$patient
clinical_information <- clinical_information[!is.na(clinical_information$times),]
clinical_information <- clinical_information[!is.na(clinical_information$events),]
load(miRNA_fName)
miRNA_names <- data[,1]
subsetted_data <- data[,seq(from=3,to=length(data),by=3)]
cols <- colnames(subsetted_data)
colnames(subsetted_data) <- substr(cols,32,nchar(cols)-16)
row.names(subsetted_data) <- miRNA_names
common_samples <- intersect(colnames(subsetted_data),clin_info)
subsetted_data <- subsetted_data[,common_samples]
clinical_information <- clinical_information[common_samples,]
subsetted_data <- t(subsetted_data)
#first, let's do an expression level filter
expression_threshold <- 0.80 # means that at least 80% of samples must have a nonzero value of the miRNA
good_cols <- c()
for (i in 1:length(colnames(subsetted_data))){
#look over all miRNA, check that the number of zeros in the expression
#is greater than the cutoff
num_zeros <- sum(subsetted_data[,i]==0)
if(num_zeros <  (1-expression_threshold) * length(rownames(subsetted_data))){
#store the column number
good_cols <- c(good_cols,i)
}
}
subsetted_data <- subsetted_data[,good_cols]
#here, we must remove all miRNAs for which we have no predicted targets:
good_cols <- c()
for (i in 1:length(colnames(subsetted_data))){
predictions <- getPredictedTargets(colnames(subsetted_data)[i],species='hsa', method='geom',min_src=2)
if (!is.null(predictions)){
good_cols <- c(good_cols,i)
}
}
setwd("../")
#Cross-validation function, combining univariate and penalised methods
cancer_type <- 'BRCA'
clinical_fName <- paste('GDCdata/TCGA-',cancer_type,'/TCGA-',cancer_type,'_clinical.csv',sep='')
miRNA_fName <- paste('TCGA-',cancer_type,'-miRNA.rda',sep='')
mRNA_fName <- paste('TCGA-',cancer_type,'-mRNA.rda',sep='')
subtype_fName <- paste('GDCdata/TCGA-',cancer_type,'/TCGA-',cancer_type,'-subtypes.csv',sep='')
# clinical_information <- read.csv(clinical_fName)
# times <- clinical_information$days_to_death
# events <- !is.na(clinical_information$days_to_death)
# #if we don't know the days to death, then let's fill in with the days to last follow up
# #at least add censored data to the mix?
# for (i in 1:length(times)){
# 	if (is.na(times[i])){
# 		times[i] = clinical_information$days_to_last_follow_up[i]
# 	}
# }
# non_na_vals <- !is.na(times)
# times <- times[non_na_vals]
# events <- events[non_na_vals]
# clinical_information<- clinical_information[non_na_vals,]
# clinical_information <- cbind(clinical_information, times,events)
# clin_info <- clinical_information$submitter_id
# row.names(clinical_information) <- clin_info
#here is where we change the clinical information to that of the subtypes file...
#comment this part out if this feature is not desired
clinical_information <- read.csv(subtype_fName)
colnames(clinical_information)[which(names(clinical_information_subtypes) == "OS.event")] <- "events"
colnames(clinical_information)[which(names(clinical_information_subtypes) == "OS.Time")] <- "times"
row.names(clinical_information) <- clinical_information$patient
clinical_information <- clinical_information[!is.na(clinical_information$times),]
clinical_information <- clinical_information[!is.na(clinical_information$events),]
load(miRNA_fName)
miRNA_names <- data[,1]
subsetted_data <- data[,seq(from=3,to=length(data),by=3)]
cols <- colnames(subsetted_data)
colnames(subsetted_data) <- substr(cols,32,nchar(cols)-16)
row.names(subsetted_data) <- miRNA_names
common_samples <- intersect(colnames(subsetted_data),clin_info)
subsetted_data <- subsetted_data[,common_samples]
clinical_information <- clinical_information[common_samples,]
subsetted_data <- t(subsetted_data)
#first, let's do an expression level filter
expression_threshold <- 0.80 # means that at least 80% of samples must have a nonzero value of the miRNA
good_cols <- c()
for (i in 1:length(colnames(subsetted_data))){
#look over all miRNA, check that the number of zeros in the expression
#is greater than the cutoff
num_zeros <- sum(subsetted_data[,i]==0)
if(num_zeros <  (1-expression_threshold) * length(rownames(subsetted_data))){
#store the column number
good_cols <- c(good_cols,i)
}
}
subsetted_data <- subsetted_data[,good_cols]
#here, we must remove all miRNAs for which we have no predicted targets:
good_cols <- c()
for (i in 1:length(colnames(subsetted_data))){
predictions <- getPredictedTargets(colnames(subsetted_data)[i],species='hsa', method='geom',min_src=2)
if (!is.null(predictions)){
good_cols <- c(good_cols,i)
}
}
subsetted_data <- subsetted_data[,good_cols]
#compute the fractional rank of the miRNA expression levels
for (i in 1:(length(colnames(subsetted_data)))){
subsetted_data[,i] <- (rank(subsetted_data[,i]) - 1) / length(subsetted_data[,i])
}
### LETS TRY THIS WITH ROWNAMES### - this is the correct way! because we want rank of each indiv miRNA in the given sample..
# for (i in 1:(length(rownames(subsetted_data)))){
# 	subsetted_data[i,] <- (rank(subsetted_data[i,]) - 1) / length(subsetted_data[i,])
# }
clinical_information <- clinical_information[clinical_information$times>0,] #filter out the things with NEGATIVE TIMES!?!
clinical_information <- clinical_information[!is.na(clinical_information$times),]
#now let's see what we get, with the new ranking
combined_df <- cbind(clinical_information$times, clinical_information$events, subsetted_data)
colnames(combined_df) <- c("times","events",colnames(combined_df)[3:length(colnames(combined_df))])
combined_df <- as.data.frame(combined_df)
folds <- 10
nrows_combined_df <- 1:NROW(combined_df)
best_overall_error <- 99999999
for (i in 0:(folds-1)){
combined_df_subsetted <- combined_df[!(nrows_combined_df%%folds==i),] #takes out the 1/nth row of the data set
#train the univaraite model
#put these as inputs to the penalized model
cox_models_miRNA <- matrix(,nrow=length(colnames(subsetted_data)),ncol=1)
row.names(cox_models_miRNA) <- colnames(subsetted_data)
for (j in 1:length(colnames(subsetted_data))){
tmp_model <- coef(summary(coxph(Surv(combined_df_subsetted$times,combined_df_subsetted$events) ~ combined_df_subsetted[,j+2])))
cox_models_miRNA[j] <- tmp_model[5] #c(tmp_model[2],tmp_model[5])
}
#significant miRNAs are those w p < 0.1:
significant_miRNAs <- rownames(cox_models_miRNA)[which(cox_models_miRNA < 0.1 & !is.nan(cox_models_miRNA))]
lambda_2_values <- c(0, 0.01, 0.1,1,10,100)
max_likelihood <- -9999999999
for (lambda2_val in lambda_2_values){
cross_val_model <- optL1(Surv(times,events),penalized = combined_df_subsetted[,significant_miRNAs], lambda2 = lambda2_val,data=combined_df_subsetted,model="cox",fold=10)
if ((cross_val_model$fullfit)@loglik > max_likelihood){
best_model <- cross_val_model
best_lambda <- lambda2_val
}
#count <- count + 1
}
#test the given model on the other 1/n of data
#record the error
print("hi")
unused_df <- combined_df[(nrows_combined_df%%folds==i),]
current_predictions <- predict(best_model$fullfit, penalized=unused_df[,significant_miRNAs],data=unused_df)
#now we need to calculate the model error
#we will use the breslow estimator
martingale_error <- 0
for (j in 1:length(rownames(unused_df))){
#for every time, let's compute the martingale error
pred_haz <- survival(current_predictions,unused_df$times[j])[j]
act_ev <- as.numeric(unused_df$events[j])
martingale_error <- martingale_error + (act_ev-as.numeric(1-pred_haz))
}
martingale_error <- abs(martingale_error)
print(martingale_error)
if (martingale_error < best_overall_error){
best_overall_error <- martingale_error
best_overall_model <- best_model
best_overall_lambda <- best_lambda
}
}
#now, take the best model?
miRNA_sorted <- sort(coef(best_overall_model$fullfit))
#miRNA_sorted <- names(miRNA_sorted)
fName_out <- paste('GDCdata/TCGA-',cancer_type,'/TCGA-',cancer_type,'-miRNA-HR-expr-rankN-univ-pen-onlyPredTargets-TEST',sep='')
save(best_overall_model,file=paste(fName_out,'.Rdata',sep=''))
write.table(miRNA_sorted,file=paste(fName_out,'.csv',sep=''),sep=',')
updateR()
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = '345661')
install.packages(as.vector(needed_packages))
sysinfo(Sys.info())
sys.info()
Sys.info()
version
setwd("Google Drive/DPhil-AndrewDhawan/Code + Data/GDAC DATA/sigQC/")
library(sigQC)
library(sigQC)
names = c("dataset1")
data.matrix = replicate(10, rnorm(20))#random matrix - 10 genes x 20 samples
mRNA_expr_matrix = list()
mRNA_expr_matrix[["dataset1"]] = data.matrix
row.names(mRNA_expr_matrix$dataset1) <- as.character(1:(dim(mRNA_expr_matrix$dataset1)[1]))
colnames(mRNA_expr_matrix$dataset1) <- as.character(1:(dim(mRNA_expr_matrix$dataset1)[2]))
#Define the signature
gene_sigs_list = list()
signature = "hypoxiaSig"
gene_sig = c('1', '4', '5')#gene ids
gene_sigs_list[[signature]] = as.matrix(gene_sig)
names_sigs = c(signature)
make_all_plots(gene_sigs_list = gene_sigs_list, mRNA_expr_matrix = mRNA_expr_matrix,
doNegativeControl=FALSE, out_dir = 'tempdir', showResults=FALSE)
document()
library(devtools)
library(roxygen2)
document()
check()
build()
